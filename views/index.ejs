<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Live Chat</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />

        <style>
            body {
                font-family: "Arial", sans-serif;
                background-color: #f8f9fa;
                margin: 0;
                padding: 0;
            }

            .chat-container {
                width: 100%;
                max-width: 800px;
                margin: 50px auto;
                padding: 20px;
                background-color: white;
                border-radius: 8px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }

            .chat-box {
                height: 400px;
                overflow-y: auto;
                border: 1px solid #ccc;
                margin-bottom: 15px;
                padding: 10px;
                background-color: #f9f9f9;
                border-radius: 8px;
                display: flex;
                flex-direction: column;
            }

            .input-group {
                display: flex;
                gap: 10px;
                margin-top: 10px;
                align-items: flex-end;
                flex-wrap: wrap;
                justify-content: flex-start;
            }

            /* Adjusting input message box and browse file button to be equal height */
            .input-group input[type="text"] {
                flex-grow: 1;
                border-radius: 20px;
                padding: 12px 20px;
                border: 1px solid #ccc;
                font-size: 16px;
                margin-bottom: 0;
                outline: none;
                transition: border-color 0.3s;
                height: 50px; /* Make the height consistent */
            }

            .input-group input[type="file"] {
                flex-shrink: 0;
                border-radius: 20px;
                padding: 12px 20px;
                background-color: #f1f1f1;
                font-size: 14px;
                border: 1px solid #ccc;
                cursor: pointer;
                height: 50px; /* Match the height of the input */
                display: inline-block;
                margin-bottom: 0;
            }

            .input-group input[type="file"]:hover {
                background-color: #e9ecef;
            }

            .input-group button {
                background-color: #28a745;
                color: white;
                border: none;
                border-radius: 20px;
                padding: 12px 20px;
                cursor: pointer;
                flex-shrink: 0;
                margin-bottom: 0;
                font-size: 16px;
                height: 50px; /* Match the height of the other elements */
                transition: background-color 0.3s;
            }

            .input-group button:hover {
                background-color: #218838;
            }

            .input-group button:focus {
                outline: none;
            }

            /* Message Alignment */
            .user-message {
                background-color: #007bff;
                color: white;
                padding: 10px;
                border-radius: 10px;
                margin: 5px 0;
                max-width: 70%;
                align-self: flex-end; /* User's message on the right */
                word-wrap: break-word;
            }

            .bot-message {
                background-color: #6c757d;
                color: white;
                padding: 10px;
                border-radius: 10px;
                margin: 5px 0;
                max-width: 70%;
                align-self: flex-start; /* Bot's message on the left */
                word-wrap: break-word;
            }

            /* Image Preview */
            .image-preview {
                width: 100px;
                height: 100px;
                object-fit: cover;
                cursor: pointer;
            }

            /* Image Full View */
            .image-full {
                max-width: 100%;
                max-height: 100%;
                cursor: zoom-in;
            }

            /* Buttons */
            .logout-btn,
            .clear-history-btn {
                background-color: #dc3545;
                color: white;
                border: none;
                border-radius: 20px;
                padding: 10px 20px;
                cursor: pointer;
                margin-top: 10px;
            }

            .logout-btn:hover,
            .clear-history-btn:hover {
                background-color: #c82333;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="chat-container">
                <h1>Welcome to Live Chat!</h1>

                <div id="username-form">
                    <input type="text" id="username" class="form-control" placeholder="Enter your name" />
                    <button id="register" class="btn btn-primary mt-3 w-100">Start Chat</button>
                </div>

                <div id="chat-room" style="display: none;">
                    <div class="chat-box" id="chat-box"></div>
                    <div class="input-group">
                        <input type="text" id="message" class="form-control" placeholder="Type your message" />
                        <input type="file" id="imageUpload" class="form-control mt-2" accept="image/*" />
                        <button id="send" class="btn btn-success">Send</button>
                    </div>

                    <!-- Logout and Clear History buttons -->
                    <div class="d-flex justify-content-between mt-3">
                        <button id="logout" class="logout-btn">Logout</button>
                        <button id="clear-history" class="clear-history-btn">Clear Chat History</button>
                    </div>
                </div>
            </div>
        </div>

        <script src="/socket.io/socket.io.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
        <script>
            const socket = io();
            const registerBtn = document.getElementById("register");
            const chatRoom = document.getElementById("chat-room");
            const usernameForm = document.getElementById("username-form");
            const usernameInput = document.getElementById("username");
            const chatBox = document.getElementById("chat-box");
            const messageInput = document.getElementById("message");
            const sendBtn = document.getElementById("send");
            const imageUpload = document.getElementById("imageUpload");
            const logoutBtn = document.getElementById("logout");
            const clearHistoryBtn = document.getElementById("clear-history");

            let username = sessionStorage.getItem("username");

            if (username) {
                usernameForm.style.display = "none";
                chatRoom.style.display = "block";
                fetchChatHistory();
            }

            registerBtn.addEventListener("click", () => {
                username = usernameInput.value.trim();
                if (username) {
                    sessionStorage.setItem("username", username);
                    fetch("/register", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ username }),
                    })
                        .then((response) => response.json())
                        .then((data) => {
                            if (data.success) {
                                usernameForm.style.display = "none";
                                chatRoom.style.display = "block";
                                fetchChatHistory();
                            }
                        });
                }
            });

            sendBtn.addEventListener("click", () => {
                const message = messageInput.value.trim();
                const image = imageUpload.files[0];
                let imageUrl = "";

                if (image) {
                    const formData = new FormData();
                    formData.append("image", image);
                    fetch("/upload", { method: "POST", body: formData })
                        .then((response) => response.json())
                        .then((data) => {
                            if (data.success) {
                                imageUrl = data.imageUrl;
                                sendMessage(message, imageUrl);
                            }
                        });
                } else {
                    sendMessage(message, imageUrl);
                }
            });

            function sendMessage(message, imageUrl) {
                socket.emit("chat_message", { username, message, imageUrl });
                messageInput.value = "";
                imageUpload.value = "";
            }

            socket.on("chat_message", (data) => {
                const div = document.createElement("div");
                div.classList.add(data.username === username ? "user-message" : "bot-message");
                div.innerHTML = `${data.username}: ${data.message}`;
                if (data.imageUrl) {
                    const img = document.createElement("img");
                    img.src = data.imageUrl;
                    img.classList.add("image-preview");
                    img.onclick = () => window.open(data.imageUrl, "_blank");
                    div.appendChild(img);
                }
                chatBox.appendChild(div);
                chatBox.scrollTop = chatBox.scrollHeight;
            });

            function fetchChatHistory() {
                fetch("/history")
                    .then((response) => response.json())
                    .then((chats) => {
                        chats.forEach((chat) => {
                            const div = document.createElement("div");
                            div.classList.add(chat.username === username ? "user-message" : "bot-message");
                            div.innerHTML = `${chat.username}: ${chat.message}`;
                            if (chat.imageUrl) {
                                const img = document.createElement("img");
                                img.src = chat.imageUrl;
                                img.classList.add("image-preview");
                                img.onclick = () => window.open(chat.imageUrl, "_blank");
                                div.appendChild(img);
                            }
                            chatBox.appendChild(div);
                        });
                        chatBox.scrollTop = chatBox.scrollHeight;
                    });
            }

            logoutBtn.addEventListener("click", () => {
                sessionStorage.removeItem("username");
                usernameForm.style.display = "block";
                chatRoom.style.display = "none";
            });

            clearHistoryBtn.addEventListener("click", () => {
                fetch("/clear-chat-history", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.success) {
                            chatBox.innerHTML = "";
                        }
                    });
            });
        </script>
    </body>
</html>
